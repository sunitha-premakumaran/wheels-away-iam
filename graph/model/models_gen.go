// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Role struct {
	RoleName        string   `json:"roleName"`
	RoleDescription string   `json:"roleDescription"`
	RolePk          string   `json:"rolePK"`
	Scopes          []string `json:"scopes"`
}

type RoleInput struct {
	Name string `json:"name"`
}

type RoleUpsertResponse struct {
	Success      bool    `json:"success"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

type User struct {
	UserID     string     `json:"userID"`
	AuthUserID string     `json:"authUserID"`
	FirstName  string     `json:"firstName"`
	LastName   string     `json:"lastName"`
	Email      string     `json:"email"`
	Phone      string     `json:"phone"`
	Status     UserStatus `json:"status"`
	UserRoles  []*string  `json:"userRoles"`
}

type UserInput struct {
	Name string `json:"name"`
}

type UserUpsertResponse struct {
	Success      bool    `json:"success"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "ACTIVE"
	UserStatusInActive UserStatus = "IN_ACTIVE"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusInActive,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusInActive:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
