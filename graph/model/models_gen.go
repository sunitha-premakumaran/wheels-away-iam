// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ErrorMessage struct {
	Code string `json:"code"`
	Msg  string `json:"msg"`
}

type PageInfo struct {
	PageSize   int `json:"pageSize"`
	PageNumber int `json:"pageNumber"`
	TotalItems int `json:"totalItems"`
	TotalPages int `json:"totalPages"`
}

type PageInput struct {
	PageSize   int `json:"pageSize"`
	PageNumber int `json:"pageNumber"`
}

type Role struct {
	Name        string          `json:"name"`
	Description *string         `json:"description,omitempty"`
	RolePk      string          `json:"rolePK"`
	Permissions []UserPermision `json:"permissions"`
}

type RoleInput struct {
	Name        string          `json:"name"`
	Description *string         `json:"description,omitempty"`
	Permissions []UserPermision `json:"permissions"`
}

type UpsertResponse struct {
	Success      bool          `json:"success"`
	ErrorMessage *ErrorMessage `json:"errorMessage,omitempty"`
}

type User struct {
	UserID     string     `json:"userID"`
	AuthUserID string     `json:"authUserID"`
	FirstName  string     `json:"firstName"`
	LastName   string     `json:"lastName"`
	Email      string     `json:"email"`
	Phone      string     `json:"phone"`
	Status     UserStatus `json:"status"`
	UserRoles  []*string  `json:"userRoles"`
}

type UserInput struct {
	FirstName string   `json:"firstName"`
	LastName  string   `json:"lastName"`
	Email     string   `json:"email"`
	Phone     string   `json:"phone"`
	Password  string   `json:"password"`
	UserRoles []string `json:"userRoles"`
}

type UserResponse struct {
	Users    []*User   `json:"users"`
	PageInfo *PageInfo `json:"pageInfo"`
}

type UserSearchInput struct {
	SearchKey    UserSearchKey `json:"searchKey"`
	SearchString string        `json:"searchString"`
}

type UserPermision string

const (
	UserPermisionUserRead  UserPermision = "USER_READ"
	UserPermisionUserWrite UserPermision = "USER_WRITE"
	UserPermisionRoleRead  UserPermision = "ROLE_READ"
	UserPermisionRoleWrite UserPermision = "ROLE_WRITE"
)

var AllUserPermision = []UserPermision{
	UserPermisionUserRead,
	UserPermisionUserWrite,
	UserPermisionRoleRead,
	UserPermisionRoleWrite,
}

func (e UserPermision) IsValid() bool {
	switch e {
	case UserPermisionUserRead, UserPermisionUserWrite, UserPermisionRoleRead, UserPermisionRoleWrite:
		return true
	}
	return false
}

func (e UserPermision) String() string {
	return string(e)
}

func (e *UserPermision) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserPermision(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserPermision", str)
	}
	return nil
}

func (e UserPermision) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserSearchKey string

const (
	UserSearchKeyEmail UserSearchKey = "EMAIL"
	UserSearchKeyName  UserSearchKey = "NAME"
)

var AllUserSearchKey = []UserSearchKey{
	UserSearchKeyEmail,
	UserSearchKeyName,
}

func (e UserSearchKey) IsValid() bool {
	switch e {
	case UserSearchKeyEmail, UserSearchKeyName:
		return true
	}
	return false
}

func (e UserSearchKey) String() string {
	return string(e)
}

func (e *UserSearchKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSearchKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserSearchKey", str)
	}
	return nil
}

func (e UserSearchKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "ACTIVE"
	UserStatusInActive UserStatus = "IN_ACTIVE"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusInActive,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusInActive:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
