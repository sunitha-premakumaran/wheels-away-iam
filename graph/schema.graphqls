enum UserStatus {
  ACTIVE
  IN_ACTIVE
}

enum UserScopes {
  USER_READ
  USER_WRITE
  ROLE_READ
  ROLE_WRITE
}

input UserInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  userRoles: [String!]!
}

enum UserSearchKey {
  EMAIL
  NAME
}

input UserSearchInput {
  searchKey: UserSearchKey!
  searchString: String!
}

input PageInput {
  pageSize: Int!
  pageNumber: Int!
}

input RoleInput {
  name: String!
  description: String!
  scopes: [UserScopes]!
}

type User {
  userID: String!
  authUserID: String!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  status: UserStatus!
  userRoles: [String]!
}

type ErrorMessage {
  code: String!
  msg: String!
}

type UpsertResponse {
  success: Boolean!
  errorMessage: ErrorMessage
}

type Role {
  roleName: String!
  roleDescription: String!
  rolePK: String!
  scopes: [String!]!
}

type PageInfo {
  pageSize: Int!
  pageNumber: Int!
  totalItems: Int!
  totalPages: Int!
}

type UserResponse {
  users: [User]!
  pageInfo: PageInfo!
}

type Query {
  getRoles: [Role]!
  getUsers(pageInput: PageInput!, searchInput: UserSearchInput): UserResponse
}

type Mutation {
  createUser(user: UserInput): UpsertResponse
  createRole(role: RoleInput): UpsertResponse
  modifyUser(deleteFlag: Boolean!, user: UserInput): UpsertResponse
  modifyRole(role: RoleInput): UpsertResponse
  onUserLogin(user: UserInput): User
}
