package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"fmt"

	graph "github.com/sunitha/wheels-away-iam/graph/generated"
	"github.com/sunitha/wheels-away-iam/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, user *model.UserInput) (*model.UpsertResponse, error) {
	return r.Resolver.UserProcessor.CreateUser(ctx, user)
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, role *model.RoleInput) (*model.UpsertResponse, error) {
	return r.Resolver.RoleProcessor.CreateRole(ctx, role)
}

// ModifyUser is the resolver for the modifyUser field.
func (r *mutationResolver) ModifyUser(ctx context.Context, deleteFlag bool, user *model.UserInput) (*model.UpsertResponse, error) {
	panic(fmt.Errorf("not implemented: ModifyUser - modifyUser"))
}

// ModifyRole is the resolver for the modifyRole field.
func (r *mutationResolver) ModifyRole(ctx context.Context, role *model.RoleInput) (*model.UpsertResponse, error) {
	panic(fmt.Errorf("not implemented: ModifyRole - modifyRole"))
}

// OnUserLogin is the resolver for the onUserLogin field.
func (r *mutationResolver) OnUserLogin(ctx context.Context, user *model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: OnUserLogin - onUserLogin"))
}

// GetRoles is the resolver for the getRoles field.
func (r *queryResolver) GetRoles(ctx context.Context) ([]*model.Role, error) {
	return r.RoleProcessor.GetRoles(ctx)
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context, pageInput model.PageInput, searchInput *model.UserSearchInput) (*model.UserResponse, error) {
	return r.UserProcessor.GetUsers(ctx, pageInput, searchInput)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
